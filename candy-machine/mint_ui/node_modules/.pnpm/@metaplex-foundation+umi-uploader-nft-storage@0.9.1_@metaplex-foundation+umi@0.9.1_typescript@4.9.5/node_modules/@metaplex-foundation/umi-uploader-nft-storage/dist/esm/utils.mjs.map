{"version":3,"file":"utils.mjs","sources":["../../src/utils.ts"],"sourcesContent":["import type { Blockstore } from 'ipfs-car/blockstore';\nimport type { CID } from 'multiformats';\nimport { CarReader } from 'nft.storage';\nimport * as Block from 'multiformats/block';\nimport { sha256 } from 'multiformats/hashes/sha2';\nimport * as dagPb from '@ipld/dag-pb';\nimport { UnixFS } from 'ipfs-unixfs';\nimport { BlockstoreCarReader } from './BlockstoreCarReader';\n\nexport type EncodedCar = { car: CarReader; cid: CID };\nexport type DagPbLink = dagPb.PBLink;\nexport type DagPbBlock = Block.Block<dagPb.PBNode>;\n\nexport const DEFAULT_GATEWAY_HOST = 'https://nftstorage.link';\n\nexport function toGatewayUri(\n  cid: string,\n  path = '',\n  host: string = DEFAULT_GATEWAY_HOST\n): string {\n  let pathPrefix = `/ipfs/${cid}`;\n  if (path) {\n    pathPrefix += '/';\n  }\n  host = host || DEFAULT_GATEWAY_HOST;\n  const base = new URL(pathPrefix, host);\n  const u = new URL(path, base);\n  return u.toString();\n}\n\nexport function toIpfsUri(cid: string, path = ''): string {\n  const u = new URL(path, `ipfs://${cid}`);\n  return u.toString();\n}\n\nexport async function toDagPbLink(\n  node: EncodedCar,\n  name: string\n): Promise<DagPbLink> {\n  const block = await node.car.get(node.cid);\n  if (!block) {\n    throw new Error(`invalid CAR: missing block for CID [${node.cid}]`);\n  }\n  return dagPb.createLink(name, block.bytes.byteLength, node.cid);\n}\n\nexport async function toDirectoryBlock(\n  links: DagPbLink[]\n): Promise<DagPbBlock> {\n  const data = new UnixFS({ type: 'directory' }).marshal();\n  const value = dagPb.createNode(data, links);\n  return Block.encode({ value, codec: dagPb, hasher: sha256 });\n}\n\nexport async function toEncodedCar(\n  block: DagPbBlock,\n  blockstore: Blockstore\n): Promise<EncodedCar> {\n  await blockstore.put(block.cid, block.bytes);\n  const car = new BlockstoreCarReader([block.cid], blockstore);\n  const { cid } = block;\n\n  return { car, cid };\n}\n"],"names":["DEFAULT_GATEWAY_HOST","toGatewayUri","cid","path","host","pathPrefix","base","URL","u","toString","toIpfsUri","toDagPbLink","node","name","block","car","get","Error","dagPb","createLink","bytes","byteLength","toDirectoryBlock","links","data","UnixFS","type","marshal","value","createNode","Block","encode","codec","hasher","sha256","toEncodedCar","blockstore","put","BlockstoreCarReader"],"mappings":";;;;;;AAaO,MAAMA,oBAAoB,GAAG,0BAAyB;AAEtD,SAASC,YAAY,CAC1BC,GAAW,EACXC,IAAI,GAAG,EAAE,EACTC,IAAY,GAAGJ,oBAAoB,EAC3B;AACR,EAAA,IAAIK,UAAU,GAAI,CAAQH,MAAAA,EAAAA,GAAI,CAAC,CAAA,CAAA;AAC/B,EAAA,IAAIC,IAAI,EAAE;AACRE,IAAAA,UAAU,IAAI,GAAG,CAAA;AACnB,GAAA;EACAD,IAAI,GAAGA,IAAI,IAAIJ,oBAAoB,CAAA;EACnC,MAAMM,IAAI,GAAG,IAAIC,GAAG,CAACF,UAAU,EAAED,IAAI,CAAC,CAAA;EACtC,MAAMI,CAAC,GAAG,IAAID,GAAG,CAACJ,IAAI,EAAEG,IAAI,CAAC,CAAA;EAC7B,OAAOE,CAAC,CAACC,QAAQ,EAAE,CAAA;AACrB,CAAA;AAEO,SAASC,SAAS,CAACR,GAAW,EAAEC,IAAI,GAAG,EAAE,EAAU;EACxD,MAAMK,CAAC,GAAG,IAAID,GAAG,CAACJ,IAAI,EAAG,CAAA,OAAA,EAASD,GAAI,CAAA,CAAC,CAAC,CAAA;EACxC,OAAOM,CAAC,CAACC,QAAQ,EAAE,CAAA;AACrB,CAAA;AAEO,eAAeE,WAAW,CAC/BC,IAAgB,EAChBC,IAAY,EACQ;AACpB,EAAA,MAAMC,KAAK,GAAG,MAAMF,IAAI,CAACG,GAAG,CAACC,GAAG,CAACJ,IAAI,CAACV,GAAG,CAAC,CAAA;EAC1C,IAAI,CAACY,KAAK,EAAE;IACV,MAAM,IAAIG,KAAK,CAAE,CAAA,oCAAA,EAAsCL,IAAI,CAACV,GAAI,GAAE,CAAC,CAAA;AACrE,GAAA;AACA,EAAA,OAAOgB,KAAK,CAACC,UAAU,CAACN,IAAI,EAAEC,KAAK,CAACM,KAAK,CAACC,UAAU,EAAET,IAAI,CAACV,GAAG,CAAC,CAAA;AACjE,CAAA;AAEO,eAAeoB,gBAAgB,CACpCC,KAAkB,EACG;AACrB,EAAA,MAAMC,IAAI,GAAG,IAAIC,MAAM,CAAC;AAAEC,IAAAA,IAAI,EAAE,WAAA;GAAa,CAAC,CAACC,OAAO,EAAE,CAAA;EACxD,MAAMC,KAAK,GAAGV,KAAK,CAACW,UAAU,CAACL,IAAI,EAAED,KAAK,CAAC,CAAA;EAC3C,OAAOO,KAAK,CAACC,MAAM,CAAC;IAAEH,KAAK;AAAEI,IAAAA,KAAK,EAAEd,KAAK;AAAEe,IAAAA,MAAM,EAAEC,MAAAA;AAAO,GAAC,CAAC,CAAA;AAC9D,CAAA;AAEO,eAAeC,YAAY,CAChCrB,KAAiB,EACjBsB,UAAsB,EACD;EACrB,MAAMA,UAAU,CAACC,GAAG,CAACvB,KAAK,CAACZ,GAAG,EAAEY,KAAK,CAACM,KAAK,CAAC,CAAA;AAC5C,EAAA,MAAML,GAAG,GAAG,IAAIuB,mBAAmB,CAAC,CAACxB,KAAK,CAACZ,GAAG,CAAC,EAAEkC,UAAU,CAAC,CAAA;EAC5D,MAAM;AAAElC,IAAAA,GAAAA;AAAI,GAAC,GAAGY,KAAK,CAAA;EAErB,OAAO;IAAEC,GAAG;AAAEb,IAAAA,GAAAA;GAAK,CAAA;AACrB;;;;"}