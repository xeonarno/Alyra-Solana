import * as Block from 'multiformats/block';
import { sha256 } from 'multiformats/hashes/sha2';
import * as dagPb from '@ipld/dag-pb';
import { UnixFS } from 'ipfs-unixfs';
import { BlockstoreCarReader } from './BlockstoreCarReader.mjs';

const DEFAULT_GATEWAY_HOST = 'https://nftstorage.link';
function toGatewayUri(cid, path = '', host = DEFAULT_GATEWAY_HOST) {
  let pathPrefix = `/ipfs/${cid}`;
  if (path) {
    pathPrefix += '/';
  }
  host = host || DEFAULT_GATEWAY_HOST;
  const base = new URL(pathPrefix, host);
  const u = new URL(path, base);
  return u.toString();
}
function toIpfsUri(cid, path = '') {
  const u = new URL(path, `ipfs://${cid}`);
  return u.toString();
}
async function toDagPbLink(node, name) {
  const block = await node.car.get(node.cid);
  if (!block) {
    throw new Error(`invalid CAR: missing block for CID [${node.cid}]`);
  }
  return dagPb.createLink(name, block.bytes.byteLength, node.cid);
}
async function toDirectoryBlock(links) {
  const data = new UnixFS({
    type: 'directory'
  }).marshal();
  const value = dagPb.createNode(data, links);
  return Block.encode({
    value,
    codec: dagPb,
    hasher: sha256
  });
}
async function toEncodedCar(block, blockstore) {
  await blockstore.put(block.cid, block.bytes);
  const car = new BlockstoreCarReader([block.cid], blockstore);
  const {
    cid
  } = block;
  return {
    car,
    cid
  };
}

export { DEFAULT_GATEWAY_HOST, toDagPbLink, toDirectoryBlock, toEncodedCar, toGatewayUri, toIpfsUri };
//# sourceMappingURL=utils.mjs.map
