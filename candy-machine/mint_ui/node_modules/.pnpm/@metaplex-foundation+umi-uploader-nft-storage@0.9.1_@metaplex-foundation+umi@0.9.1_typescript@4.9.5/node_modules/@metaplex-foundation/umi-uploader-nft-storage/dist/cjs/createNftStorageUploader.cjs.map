{"version":3,"file":"createNftStorageUploader.cjs","sources":["../../src/createNftStorageUploader.ts"],"sourcesContent":["/* eslint-disable no-await-in-loop */\nimport {\n  Context,\n  createGenericFileFromJson,\n  GenericFile,\n  getBytesFromGenericFiles,\n  isKeypairSigner,\n  lamports,\n  publicKeyBytes,\n  Signer,\n  SolAmount,\n  UploaderInterface,\n  UploaderUploadOptions,\n} from '@metaplex-foundation/umi';\nimport { NFTStorageMetaplexor } from '@nftstorage/metaplex-auth';\nimport { MemoryBlockStore } from 'ipfs-car/blockstore/memory';\nimport { Blob, NFTStorage } from 'nft.storage';\nimport {\n  toDagPbLink,\n  toDirectoryBlock,\n  toEncodedCar,\n  toGatewayUri,\n  toIpfsUri,\n} from './utils';\n\nexport type NftStorageUploaderOptions = {\n  payer?: Signer;\n  token: string;\n  endpoint?: URL;\n  gatewayHost?: string;\n  batchSize?: number;\n  useGatewayUrls?: boolean;\n};\n\nexport function createNftStorageUploader(\n  context: Pick<Context, 'rpc' | 'payer'>,\n  options: NftStorageUploaderOptions = { token: '' }\n): UploaderInterface & {\n  client: () => Promise<NFTStorage | NFTStorageMetaplexor>;\n} {\n  const { payer } = options;\n  const { token } = options;\n  const { endpoint } = options;\n  const { gatewayHost } = options;\n  const batchSize = options.batchSize ?? 50;\n  const useGatewayUrls = options.useGatewayUrls ?? true;\n  if (!token) {\n    throw new Error('NFT Storage token is required');\n  }\n\n  const getClient = async (): Promise<NFTStorage | NFTStorageMetaplexor> => {\n    if (token) {\n      return new NFTStorage({ token, endpoint });\n    }\n\n    const signer: Signer = payer ?? context.payer;\n    const authOptions = {\n      mintingAgent: '@metaplex-foundation/umi-plugin-nft-storage',\n      solanaCluster: context.rpc.getCluster(),\n      endpoint,\n    };\n\n    return isKeypairSigner(signer)\n      ? NFTStorageMetaplexor.withSecretKey(signer.secretKey, authOptions)\n      : NFTStorageMetaplexor.withSigner(\n          signer.signMessage.bind(signer),\n          publicKeyBytes(signer.publicKey),\n          authOptions\n        );\n  };\n\n  const getUploadPrice = async (): Promise<SolAmount> => lamports(0);\n\n  const upload = async (\n    files: GenericFile[],\n    options: UploaderUploadOptions = {}\n  ): Promise<string[]> => {\n    if (batchSize <= 0) {\n      throw new Error('batchSize must be greater than 0');\n    }\n\n    const client = await getClient();\n    const blockstore = new MemoryBlockStore();\n    const uris: string[] = [];\n    const numBatches = Math.ceil(files.length / batchSize);\n    const batches: GenericFile[][] = new Array(numBatches)\n      .fill([])\n      .map((_, i) => files.slice(i * batchSize, (i + 1) * batchSize));\n\n    for (let i = 0; i < batches.length; i += 1) {\n      const batch = batches[i];\n      const batchLinks = [];\n\n      for (let j = 0; j < batch.length; j += 1) {\n        const file = batch[j];\n        const blob = new Blob([file.buffer]);\n        const node = await NFTStorage.encodeBlob(blob, { blockstore });\n        const fileUri = useGatewayUrls\n          ? toGatewayUri(node.cid.toString(), undefined, gatewayHost)\n          : toIpfsUri(node.cid.toString());\n        uris.push(fileUri);\n        batchLinks.push(await toDagPbLink(node, file.uniqueName));\n      }\n\n      const batchBlock = await toDirectoryBlock(batchLinks);\n      const { cid, car } = await toEncodedCar(batchBlock, blockstore);\n\n      const storeOptions: Parameters<typeof client.storeCar>[2] = {};\n      if (options.onProgress) {\n        const { onProgress } = options;\n        const totalSize = getBytesFromGenericFiles(...files);\n        let uploadedSize = 0;\n        storeOptions.onStoredChunk = (size: number) => {\n          uploadedSize += size;\n          const percent = (uploadedSize / totalSize) * 100;\n          onProgress(Math.min(percent, 100), size);\n        };\n      }\n\n      const promise = isNFTStorageMetaplexor(client)\n        ? client.storeCar(cid, car, storeOptions)\n        : client.storeCar(car, storeOptions);\n\n      await promise;\n    }\n\n    return uris;\n  };\n\n  const uploadJson = async <T>(json: T): Promise<string> => {\n    const file = createGenericFileFromJson(json);\n    const uris = await upload([file]);\n    return uris[0];\n  };\n\n  return {\n    getUploadPrice,\n    upload,\n    uploadJson,\n    client: getClient,\n  };\n}\n\nconst isNFTStorageMetaplexor = (\n  client: NFTStorage | NFTStorageMetaplexor\n): client is NFTStorageMetaplexor => 'storeNFTFromFilesystem' in client;\n"],"names":["createNftStorageUploader","context","options","token","payer","endpoint","gatewayHost","batchSize","useGatewayUrls","Error","getClient","NFTStorage","signer","authOptions","mintingAgent","solanaCluster","rpc","getCluster","isKeypairSigner","NFTStorageMetaplexor","withSecretKey","secretKey","withSigner","signMessage","bind","publicKeyBytes","publicKey","getUploadPrice","lamports","upload","files","client","blockstore","MemoryBlockStore","uris","numBatches","Math","ceil","length","batches","Array","fill","map","_","i","slice","batch","batchLinks","j","file","blob","Blob","buffer","node","encodeBlob","fileUri","toGatewayUri","cid","toString","undefined","toIpfsUri","push","toDagPbLink","uniqueName","batchBlock","toDirectoryBlock","car","toEncodedCar","storeOptions","onProgress","totalSize","getBytesFromGenericFiles","uploadedSize","onStoredChunk","size","percent","min","promise","isNFTStorageMetaplexor","storeCar","uploadJson","json","createGenericFileFromJson"],"mappings":"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"}