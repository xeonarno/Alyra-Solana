'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var Block = require('multiformats/block');
var sha2 = require('multiformats/hashes/sha2');
var dagPb = require('@ipld/dag-pb');
var ipfsUnixfs = require('ipfs-unixfs');
var BlockstoreCarReader = require('./BlockstoreCarReader.cjs');

function _interopNamespace(e) {
  if (e && e.__esModule) return e;
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    });
  }
  n["default"] = e;
  return Object.freeze(n);
}

var Block__namespace = /*#__PURE__*/_interopNamespace(Block);
var dagPb__namespace = /*#__PURE__*/_interopNamespace(dagPb);

const DEFAULT_GATEWAY_HOST = 'https://nftstorage.link';
function toGatewayUri(cid, path = '', host = DEFAULT_GATEWAY_HOST) {
  let pathPrefix = `/ipfs/${cid}`;
  if (path) {
    pathPrefix += '/';
  }
  host = host || DEFAULT_GATEWAY_HOST;
  const base = new URL(pathPrefix, host);
  const u = new URL(path, base);
  return u.toString();
}
function toIpfsUri(cid, path = '') {
  const u = new URL(path, `ipfs://${cid}`);
  return u.toString();
}
async function toDagPbLink(node, name) {
  const block = await node.car.get(node.cid);
  if (!block) {
    throw new Error(`invalid CAR: missing block for CID [${node.cid}]`);
  }
  return dagPb__namespace.createLink(name, block.bytes.byteLength, node.cid);
}
async function toDirectoryBlock(links) {
  const data = new ipfsUnixfs.UnixFS({
    type: 'directory'
  }).marshal();
  const value = dagPb__namespace.createNode(data, links);
  return Block__namespace.encode({
    value,
    codec: dagPb__namespace,
    hasher: sha2.sha256
  });
}
async function toEncodedCar(block, blockstore) {
  await blockstore.put(block.cid, block.bytes);
  const car = new BlockstoreCarReader.BlockstoreCarReader([block.cid], blockstore);
  const {
    cid
  } = block;
  return {
    car,
    cid
  };
}

exports.DEFAULT_GATEWAY_HOST = DEFAULT_GATEWAY_HOST;
exports.toDagPbLink = toDagPbLink;
exports.toDirectoryBlock = toDirectoryBlock;
exports.toEncodedCar = toEncodedCar;
exports.toGatewayUri = toGatewayUri;
exports.toIpfsUri = toIpfsUri;
//# sourceMappingURL=utils.cjs.map
